using System;

namespace Adapter
{
	// Структурные паттерны

	/*
	 * Adapter — очень распространенный паттерн, позволяющий работать вместе объектам с несовместимыми интерфейсами.
	 * Применение данного паттерна очень широко, так как в программировании очень часто необходимые нам ресурсы поддерживают разные способы доступа. 
	 * И данные из этих ресурсов бывают нам нужны в нашем приложении одновременно.
	 * 
	 * Итак, когда используем? 
	 * Нам необходимо использовать уже имеющийся класс, но его интерфейс не соответствует нашим потребностям.
	 * Нужно использовать существующий класс совместно с другими, интерфейсы которых не совместимы.
	 */

	class Program
	{
		static void Main(string[] args)
		{
			/* 
			 * У вас есть программа, которая отправляет на печать изображения сторонним устройствам. 
			 * Для печати изображений у вас есть класс ImageDrawer. 
			 * В нём вы работаете с принтером, у него есть понятный интерфейс, который вы себе подключили. 
			 * В какой-то момент вам становится необходимо добавить поддержку печати на холсте, 
			 * но в классе ImageDrawer использование печати на холсте не предусмотрено, 
			 * поэтому нужно либо переписать его, либо можно использовать адаптер, как показано ниже: 
			*/

			// Создадим интерфейсы устройств: IPrinter.sc и IPainter.cs

			// Реализуем интерфейсы в классах для работы с устройствами: PaperPrinter.cs и CanvasPainter.cs

			// Наш класс, с помощью которого мы печатаем (который поддерживает печать на бумаге, но не поддерживает печать на холсте): ImageDrawer.cs

			// Теперь собственно реализация паттерна: 
			// Нам надо отрисовать изображение на бумаге и холсте
			// Запускаем класс для отрисовки
			var imageDrawer = new ImageDrawer();

			// Создаем класс для работы с бумажным принтером
			PaperPrinter paperPrinter = new PaperPrinter();
			// Запускаем отрисовку на бумаге
			imageDrawer.DrawWith(paperPrinter);

			// Теперь нужна печать на холсте
			CanvasPainter canvasPainter = new CanvasPainter();

			// используем адаптер
			IPrinter imagePrinter = new CanvasPainterToPrinterAdapter(canvasPainter);
			// Запускаем печать на холсте
			imageDrawer.DrawWith(imagePrinter);
			Console.Read();
		}
	}
}
