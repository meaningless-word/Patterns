using System;

namespace Facade
{
	// Структурные паттерны

	/* 
	 * Часто бывает, что системы, с которыми нам приходится работать, содержат излишний функционал, который нам не требуется. 
	 * При этом нам всё равно приходится взаимодействовать с ними, чтобы получить результат.
	 * Например, есть Интернет-магазин с большим объёмом заказов, несколькими складами, сложной логистикой, большим количеством курьеров и так далее. 
	 * Вы как клиент, пользующийся его услугами, вовсе не обязательно должны знать, как там у них всё устроено — для этого вы взаимодействуете с менеджером или оператором.
	 * Все остальные процессы скрыты от вас.
	 * Такой же подход применим и в разработке, для чего реализован паттерн фасад.
	 */

	/* 
	 * Когда используем? 
	 * Система сложна, необходимо упростить с ней работу. Фасад позволит определить одну упрощенную точку взаимодействия с ней.
	 * В коде может возникнуть слишком много зависимостей между клиентом и сложной системой. 
	 * Реализация фасада позволит отделить (изолировать) части и компоненты сложной системы от клиента и работать с ними независимо.
	 * Если нам нужно определить подсистемы компонентов в сложной системе. Создание фасадов для компонентов каждой отдельной подсистемы упрощает взаимодействие между ними.
	*/

	class Program
	{
		/*
		 * Кстати, отличным примером реализации Фасада из реальной жизни может быть ваша IDE, в которой вы пишете код.
		 * Через неё вы взаимодействуете с компилятором, файловой системой, командной строкой и много чем ещё. 
		 * Ваш процесс разработки при этом значительно упрощается.
		 */

		static void Main(string[] args)
		{
			// Начнём с написания кода. Нам потребуется класс текстового редактора: Editor.cs

			// Код С#, как вам известно, перед выполнением должен компилироваться, значит, нам нужно вызывать компилятор, класс для работы с которым может выглядеть так: Compiller.cs

			// Код С# выполняется на виртуальной машине CLR, поэтому нам понадобится класс для вызова среды выполнения: Runtime.cs

			// Теперь, когда у нас есть все компоненты, реализуем Фасад, через который и будет работать с ними наша IDE: IdeFacade.cs

			// Посмотрим, как всё это работает:
			// при запуске IDE инициализирует объекты для работы с компонентами
			Editor textEditor = new Editor();
			Compiller compiller = new Compiller();
			Runtime runtime = new Runtime();

			// Наша модель IDE запущена и готова к использованию
			IdeFacade ide = new IdeFacade(textEditor, compiller, runtime);

			// Начинаем писать код и нажимаем кнопку Start
			ide.Start("Console.WriteLine(\"Hello World!\");"); // запускается выполнение нашей программы
			ide.Stop();
		}
	}

}
