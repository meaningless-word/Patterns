using System;

namespace FactoryMethod
{
	// Порождающие паттерны

	/*
	 * Этот паттерн стоит применять в следующих случаях:
	 * Когда заранее неизвестен тип создаваемых объектов.
	 * Когда в системе нужно заранее предусмотреть независимость от процесса создания новых объектов и расширяемость. 
	 *     При этом легко можно будет добавлять поддержку создания объектов нового класса.
	 * Когда создание объектов необходимо делегировать от основного класса классам-наследникам.
	 * 
	 * В программировании бывает масса ситуаций, когда нужно заранее определить общий механизм взаимодействия в похожих ситуациях.
	 * Одна из возможных: 
	 * вам нужно реализовать рассылку сообщений по SMS. Код написан, и всё у вас хорошо, но в коде жестко зашита рассылка именно посредством SMS.
	 * Что будет, если вам нужно будет добавить рассылку по электронной почте? А если потом понадобится ещё и в мессенджеры? 
	 * Вам придётся переписывать код заново, при этом он разрастется, и его будет неудобно поддерживать, он будет перегружен ветвлениями, 
	 * блоками if-else и т.д., так вам нужно будет выполнять различные действия в зависимости от того, какой тип рассылки необходим.
	 * Эту проблему успешно решает реализация Фабричного метода, который выносит привязку к конкретному способу отправки сообщений из вашего основного класса для рассылок.
	 * Приступим к реализации. 
	 */


	class Program
	{
		// Создадим абстрактный класс-модель сообщения: Message.cs

		// Создадим отдельные реализации для e-mail и SMS-сообщений: SmsMessage.cs и EmailMessage.cs

		// Создадим абстрактный класс для рассылок с Фабричным методом: MessageSender.cs

		// И конкретные реализации под оба вида рассылок: EmailMessageSender.sc и SmsMessageSender.cs

		// Теперь используем наши реализации в программу для выполнения рассылки номера заказа клиенту: 

		static void Main(string[] args)
		{
			string messageText = "Ваш номер заказа - 83456";

			// Отправляем заказ по SMS
			MessageSender sender = new SmsMessageSender("+79856455320");
			Message smsMessage = sender.Send(messageText);

			// Отправляем заказ по e-mail
			sender = new EmailMessageSender("orders@myshop.com");
			Message message = sender.Send(messageText);
		}
	}
}
